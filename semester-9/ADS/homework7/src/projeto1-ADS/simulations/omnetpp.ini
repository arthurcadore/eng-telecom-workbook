[General]
network = src.MM1
sim-time-limit = 100s

# Geradores com tempos exponenciais
*.gen0.interArrivalTime = exponential(2.0s)
*.gen1.interArrivalTime = exponential(2.2s)
*.gen2.interArrivalTime = exponential(2.1s)

# Filas com tempo de serviço exponencial
*.queue0.serviceTime = exponential(0.9s)
*.queue1.serviceTime = exponential(0.8s)
*.queue2.serviceTime = exponential(0.85s)

# Probabilidade do splitter (60% para out[0], 40% para out[1])
*.splitter.prob = 0.6

# Gravação de vetores de tamanho de fila
**.queue*.queueLength.vector-recording = true

[Config WorkloadSweep]
network = src.MM1
sim-time-limit = 100s

# Parâmetros dos geradores (todas as combinações)
**.gen0.interArrivalTime = ${gen0=0.7s,0.8s}
**.gen1.interArrivalTime = ${gen1=0.9s,1.3s}
**.gen2.interArrivalTime = ${gen2=0.7s,1.5s}

# Tempos de serviço fixos
**.queue0.serviceTime = 0.1s
**.queue1.serviceTime = 0.3s
**.queue2.serviceTime = 0.5s

# Probabilidade do splitter
**.splitter.prob = 0.6

# Forçar gravação de todos os vetores
**.vector-recording = true
**.queue*.queueLength.vector-recording = true
output-vector-file = simulations/results/WorkloadSweep.vec

[Config Teste]
network = src.MM1
sim-time-limit = 100s

# Apenas uma combinação de parâmetros
**.gen0.interArrivalTime = 0.7s
**.gen1.interArrivalTime = 1.3s
**.gen2.interArrivalTime = 0.7s

**.queue0.serviceTime = 0.1s
**.queue1.serviceTime = 0.3s
**.queue2.serviceTime = 0.5s

**.splitter.prob = 0.6

# Forçar gravação de todos os vetores
**.vector-recording = true
**.queue*.queueLength.vector-recording = true
